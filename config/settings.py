"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from django.utils.timezone import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# env config
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "True"

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party apps
    "rest_framework",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "debug_toolbar",
    "django_filters",
    # my apss
    "core",
    "store",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # debug toolbar
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]
INTERNAL_IPS = [
    "127.0.0.1",
]
ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "3306"),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Tehran"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# auth config
AUTH_USER_MODEL = "core.CustomUser"

# password validator
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Cache configuration (for Redis OTP)
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "10/minute",
        "user": "30/minute",
        "otp": "5/hour",
    },
}

# SimpleJWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("JWT",),
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

# spectacular config
SPECTACULAR_SETTINGS = {
    "TITLE": "Plants App API",
    "DESCRIPTION": """
        # Plants App API Documentation

        This API provides a secure and flexible authentication system for user management in a plants application.
        Key features include:
        - **OTP-based Registration/Login**: Secure, passwordless auth via email/SMS.
        - **Traditional Login**: Email/Phone + Password.
        - **Profile Management**: Complete/update user profiles post-registration.
        - **Password Reset**: Multi-step secure reset with OTP and timed tokens.
        - **Identifier Change**: Safely update email/phone with OTP verification.

        ## Security Notes
        - All endpoints use JWT tokens for authentication (except public ones).
        - Rate limiting is enforced (e.g., 5 OTP requests/hour).
        - Sessions are used for temporary OTP storage.

        ## Testing
        - Use the "Try it out" button in Swagger to test endpoints.
        - Supports JSON and form-data inputs.
        - Authorize with JWT: Click "Authorize" and enter JWT <access_token>`.
    """,
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "COMPONENT_SPLIT_REQUEST": True,
    # "CONTACT": {
    #     "name": "Pouria Shirali",
    #     # "url": "https://example.com",
    #     "email": "pouriashiralipour@gmail.com",
    # },
    # "LICENSE": {
    #     "name": "MIT License",
    #     "url": "https://opensource.org/licenses/MIT",
    # },
    "TAGS": [
        {
            "name": "Authentication",
            "description": "OTP-based and traditional login/registration workflows.",
        },
        {
            "name": "Profile",
            "description": "Update and complete user profiles (requires authentication).",
        },
        {
            "name": "Password Management",
            "description": "Secure password reset and change processes.",
        },
        {
            "name": "Identifier Change",
            "description": "Change email or phone number securely.",
        },
        {"name": "Admin", "description": "Admin-only user management endpoints."},
    ],
    "SWAGGER_UI_SETTINGS": {
        "docExpansion": "list",
        "defaultModelsExpandDepth": -1,
        "filter": True,
        "deepLinking": True,
        "persistAuthorization": True,
        "displayRequestDuration": True,
        "operationsSorter": "method",
        "tagsSorter": "alpha",
        "operationsSorter": "method",
    },
    "REDOC_SETTINGS": {
        "theme": {
            "colors": {
                "primary": {"main": "#81a1c1"},
                "success": {"main": "#a3be8c"},
                "warning": {"main": "#ebcb8b"},
                "error": {"main": "#bf616a"},
                "http": {
                    "get": "#a3be8c",
                    "post": "#81a1c1",
                    "patch": "#ebcb8b",
                    "delete": "#bf616a",
                },
            },
            "typography": {
                "fontFamily": '"JetBrains Mono", "Fira Code", monospace',
                "fontSize": "15px",
                "headings": {
                    "fontFamily": '"Poppins", "Lato", sans-serif',
                    "fontWeight": "600",
                },
            },
            "sidebar": {
                "backgroundColor": "#2e3440",
                "textColor": "#d8dee9",
            },
            "logo": {
                # "gutter": "5px",  # Adjust spacing around the logo
                # "maxHeight": "100px" # Uncomment and set your logo URL
                # "url": "URL_to_your_logo.png"
            },
        },
        "hide-hostname": True,
        "expandResponses": "200,201",
        "requiredPropsFirst": True,
        "noAutosearch": True,
    },
    "SERVERS": [
        {"url": "http://127.0.0.1:8000", "description": "Local server"},
    ],
    "ENUM_NAME_OVERRIDES": {
        "OTPPurpose": "OTP Purpose Enum",
    },
}
